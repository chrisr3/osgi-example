import aQute.bnd.gradle.Bundle
import aQute.bnd.gradle.Resolve
import aQute.bnd.gradle.TestOSGi

plugins {
    id 'net.corda.plugins.quasar-utils'
    id 'org.jetbrains.kotlin.jvm'
    id 'biz.aQute.bnd.builder'
    id 'java-library'
}

ext {
    quasarVersion = '0.7.14.r3'
}

quasar {
    excludePackages = [
        'aQute.**',
        'co.paralleluniverse**',
        'com.codahale**',
        'com.esotericsoftware.**',
        'groovy**',
        'jdk**',
        'kotlin**',
        'org.gradle**',
        'org.junit**',
        'org.objenesis*',
        'org.slf4j**'
    ]
}

repositories {
    maven {
        url "$artifactory_contextUrl/corda-dependencies"
    }
}

sourceSets {
    osgiTest {
        kotlin {
            srcDirs = [ 'src/osgi-test/kotlin' ]
        }
        resources {
            srcDirs = [ 'src/osgi-test/resources' ]
        }
    }
}

configurations {
    testCompileOnly.extendsFrom compileOnly
    osgiTestCompileOnly.extendsFrom compileOnly
    osgiTestImplementation.extendsFrom implementation
    osgiTestRuntimeOnly.extendsFrom cordaRuntimeOnly
}

dependencies {
    api project(':api')
    implementation "net.corda.kotlin:kotlin-stdlib-jdk8-osgi:$kotlin_version"
    implementation "com.esotericsoftware:kryo:4.0.2"

    compileOnly "org.osgi:osgi.core:$osgi_version"
    compileOnly "org.osgi:osgi.annotation:$osgi_version"
    compileOnly "org.osgi:org.osgi.service.log:$osgi_log_version"
    compileOnly "org.osgi:org.osgi.service.component.annotations:$osgi_component_annotations_version"

    testImplementation project(':logging')
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    testRuntimeOnly "org.slf4j:slf4j-simple:$slf4j_version"

    osgiTestImplementation "org.osgi:org.osgi.test.junit5:$osgi_test_junit5_version"
    osgiTestRuntimeOnly "org.junit.platform:junit-platform-launcher:$junit_platform_version"
    osgiTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    osgiTestRuntimeOnly "org.apache.felix:org.apache.felix.framework:$felix_version"
    osgiTestRuntimeOnly "org.apache.felix:org.apache.felix.scr:$felix_scr_version"
    osgiTestRuntimeOnly "org.apache.felix:org.apache.felix.configadmin:$felix_configadmin_version"
    osgiTestRuntimeOnly "org.osgi:org.osgi.util.function:$osgi_util_function_version"
    osgiTestRuntimeOnly "org.osgi:org.osgi.util.promise:$osgi_util_promise_version"

    // Basic SLF4J back-end
    osgiTestRuntimeOnly project(':logging')
    osgiTestRuntimeOnly "org.slf4j:slf4j-simple:$slf4j_version"
}

tasks.named('jar', Jar) {
    bnd """\
Bundle-Name: OSGi Example Worker
Bundle-SymbolicName: com.example.osgi.work
"""
}

def testingBundle = tasks.register('testingBundle', Bundle) {
    archiveClassifier = 'tests'
    from sourceSets.osgiTest.output
    sourceSet = sourceSets.osgiTest

    bnd """\
Bundle-SymbolicName: \${task.archiveBaseName}-\${task.archiveClassifier}
Test-Cases: \${classes;HIERARCHY_INDIRECTLY_ANNOTATED;org.junit.platform.commons.annotation.Testable;CONCRETE}
"""
}

def resolve = tasks.register('resolve', Resolve) {
    bundles = sourceSets.osgiTest.runtimeClasspath + configurations.archives.artifacts.files
    bndrun = 'test.bndrun'
}

def testOSGi = tasks.register('testOSGi', TestOSGi) {
    dependsOn resolve
    bundles = sourceSets.osgiTest.runtimeClasspath + configurations.archives.artifacts.files
    bndrun = 'test.bndrun'
}

tasks.named('check') {
    dependsOn resolve, testOSGi
}

artifacts {
    archives testingBundle
}
