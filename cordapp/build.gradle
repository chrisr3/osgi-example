import aQute.bnd.gradle.Bundle
import aQute.bnd.gradle.Export
import aQute.bnd.gradle.Resolve
import aQute.bnd.gradle.TestOSGi

plugins {
    id 'net.corda.plugins.cordapp-cpk'
    id 'net.corda.plugins.quasar-utils'
    id 'org.jetbrains.kotlin.jvm'
    id 'java-library'
}

cordapp {
    targetPlatformVersion = 999
    minimumPlatformVersion = 999

    contract {
        name = 'Example CorDapp'
        versionId = 1
        licence = 'Test-Licence'
        vendor = 'R3'
    }
}

quasar {
    excludePackages = [
        'aQute.**',
        'co.paralleluniverse**',
        'com.codahale**',
        'com.esotericsoftware.**',
        'groovy**',
        'jdk**',
        'kotlin**',
        'org.gradle**',
        'org.junit**',
        'org.objenesis*',
        'org.slf4j**'
    ]
}

repositories {
    mavenLocal()
    maven {
        url "$artifactory_contextUrl/corda-dependencies"
        content {
            includeGroup 'co.paralleluniverse'
        }
    }
    maven {
        url 'https://repository.mulesoft.org/nexus/content/repositories/public'
    }
}

configurations {
    all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('co.paralleluniverse:quasar-core-osgi') with module("co.paralleluniverse:quasar-core-osgi:$quasar_version")
            }
        }
    }

    testCompileOnly.extendsFrom compileOnly
    cordaTestFramework
}

ext {
    quasarVersion = '0.7.14.r3'
}

dependencies {
    compileOnly "org.osgi:org.osgi.service.component.annotations:$osgi_component_annotations_version"
    cordaProvided "org.osgi:org.osgi.service.log:$osgi_log_version"
    cordaProvided "net.corda:corda-core:$corda_version"
    cordaProvided "javax.activation:activation.osgi:1.1"
    implementation "net.corda.kotlin:kotlin-stdlib-jdk8-osgi:$kotlin_version"
    implementation "com.google.guava:guava:$guava_version"

    testImplementation "org.osgi:org.osgi.test.junit5:$osgi_test_junit5_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junit_platform_version"

    cordaTestFramework project(':framework-stub')

    testRuntimeOnly "org.apache.felix:org.apache.felix.framework:$felix_version"
    testRuntimeOnly "org.apache.felix:org.apache.felix.scr:$felix_scr_version"
    testRuntimeOnly "org.apache.felix:org.apache.felix.metatype:$felix_metatype_version"
    testRuntimeOnly "org.osgi:org.osgi.util.function:$osgi_util_function_version"
    testRuntimeOnly "org.osgi:org.osgi.util.promise:$osgi_util_promise_version"

    // OSGi Logging Service, implemented by Felix and consumed by Logback.
    testRuntimeOnly "org.osgi:org.osgi.util.pushstream:$osgi_util_pushstream_version"
    testRuntimeOnly "org.apache.felix:org.apache.felix.configadmin:$felix_configadmin_version"
    testRuntimeOnly "org.apache.felix:org.apache.felix.log:$felix_log_version"
    testRuntimeOnly "org.apache.felix:org.apache.felix.logback:$felix_logback_version"
    testRuntimeOnly "ch.qos.logback:logback-classic:$logback_version"
}

def jar = tasks.named('jar', Jar)

tasks.named('test', Test) {
    // Our JUnit tests run inside the OSGi framework.
    enabled = false
}

def testingBundle = tasks.register('testingBundle', Bundle) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
    sourceSet = sourceSets.test

    bnd """
Bundle-SymbolicName: \${task.archiveBaseName}-\${task.archiveClassifier}
Test-Cases: \${classes;HIERARCHY_INDIRECTLY_ANNOTATED;org.junit.platform.commons.annotation.Testable;CONCRETE}
"""
}

def resolve = tasks.register('resolve', Resolve) {
    dependsOn jar, testingBundle
    bundles = files(sourceSets.test.runtimeClasspath, configurations.cordaProvided, configurations.archives.artifacts.files)
    bndrun = 'test.bndrun'
}

def testOSGi = tasks.register('testOSGi', TestOSGi) {
    dependsOn resolve

    ext {
        cordappSymbolicName = 'com.example.osgi.cordapp'
    }

    bundles = files(sourceSets.test.runtimeClasspath, configurations.cordaProvided, configurations.archives.artifacts.files)
    bndrun = 'test.bndrun'
}

def validate = tasks.register('validate', Resolve) {
    dependsOn project(':framework-stub').tasks.named('jar', Jar)

    ext {
        cordappSymbolicName = 'com.example.osgi.cordapp'
    }

    bundles = files(sourceSets.main.runtimeClasspath, jar, configurations.cordaProvided, configurations.cordaTestFramework)
    bndrun = 'validate.bndrun'
}

tasks.named('cpk') {
    dependsOn validate
}

tasks.register('export', Export) {
    dependsOn validate
    bundles = files(sourceSets.test.runtimeClasspath, jar, configurations.quasarAgent, configurations.cordaProvided)
    exporter = 'bnd.runbundles'
    bndrun = 'validate.bndrun'
}

tasks.named('check') {
    dependsOn validate, testOSGi
}

artifacts {
    archives testingBundle
}
